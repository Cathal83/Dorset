{"version":3,"sources":["01_settings/_settings.scss","02_base/_base.scss","02_base/_blocks.scss","02_base/_color.scss","02_base/_icons.scss","02_base/_images.scss","../node_modules/singularitygs/stylesheets/singularitygs/_api.scss","../node_modules/singularitygs/stylesheets/singularitygs/math/_columns.scss","../node_modules/singularitygs/stylesheets/singularitygs/helpers/_directions.scss","../node_modules/singularitygs/stylesheets/singularitygs/api/_isolation.scss","02_base/_layout.scss","02_base/_links.scss","02_base/_nav.scss","../node_modules/breakpoint-sass/stylesheets/_breakpoint.scss","02_base/_typography.scss","03_layouts/_content.scss","03_layouts/_footer.scss","03_layouts/_header.scss","03_layouts/_headerimage.scss"],"names":[],"mappings":"AAsCE,yGAAY;AAHd;EAEE,kBAAkB,EAAA;;ACrCpB;EACE,sBAAsB,EAEvB;;ACHD;EACE,UAAU;EACV,WAAW,EAEZ;;AACD;EACE,UAAU;EACV,WAAW;EACX,UAAU;EACV,WAAW;EACX,gBAAgB;EAChB,yBAAyB;EACzB,cAAc,EAEf;;ACdD;EACE,YHEU,EGAX;;ACFC;EACE,YAAY;EACZ,aAAa,EAEd;;ACLH;EACE,iBAAiB,EAElB;;AAGC;EC2CE,2OAA2B;EAgD3B,YCzEyB;EDyEzB,aE5Fa;EF4Fb,eG5DgD;EH4DhD,gBGtDkD;EHsDlD,YGpB0C,EJrD3C;EAnBH;IC4CI,2OAA2B;IAgD3B,YCzEyB;IDyEzB,aE5Fa;IF4Fb,eG5DgD;IH4DhD,gBGtDkD;IHsDlD,YGpB0C;IJlExC,mBAAmB;IACnB,UAAU;IACV,QAAQ;IACR,cAAc;IACd,YAAY,EAEb;EACD;IACE,YAAY;IACZ,aAAa;IACb,kBAAkB,EAEnB;;AKvBL;;;;;EAKE,iBVgGkB;EU/FlB,kBV+FkB,EU7FnB;;ACRD;EACE,iBAAiB,EAuBlB;EAxBD;IAKM,YAAY;IACZ,cAAc;IACd,0BXEc;IWDd,oBAAoB,EAErB;EAVL;IAYM,6BAA6B,EAE9B;EACY;IACX,6BAA6B,EAE9B;EAfY;IAiBX,0BXXc,EWaf;;ACtBL;EACE,cAAc,EAMf;ECyDG;IDhEJ;MAII,eAAe,EAGlB,EAAA;;AAED;EACE,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,UAAU;EACV,UAAU,EAqBX;EAnBC;IACE,eAAe;IACf,mBAAmB;IACnB,YAAY;IACZ,YAAY;IACZ,0BZTY;IYUZ,QAAQ;IACR,OAAO,EAWR;IAlBD;MAUI,SAAS,EAEV;IAZH;MAeI,UAAU,EAEX;;AEjCL;;;;;;EAME,oBAAoB,EAErB;;AAED;;;;EAIE,oBAAoB,EAErB;;AAED;;EAEE,iBduBY,EcrBb;;AAED;;;EAGE,iBdeY,Ecbb;;AAED;EAEE,iBAAiB,EAElB;Ed0CK;Ic9CN;Md0DI,gBA3CU;MA6CR,iBA7Ca,EcXlB,EAAA;Ed0CK;Ic9CN;Md0DI,gBA1CW;MA4CT,iBA5Cc,EcZnB,EAAA;Ed0CK;Ic9CN;Md0DI,gBAzCW;MA2CT,iBA3Cc,EcbnB,EAAA;;Ad0CK;EcxCN;IdoDI,gBArCU;IAuCR,iBAvCa,EcZlB,EAAA;;AdqCK;EcxCN;IdoDI,gBApCW;IAsCT,iBAtCc,EcbnB,EAAA;;AdqCK;EcnCN;Id+CI,gBAhCU;IAkCR,kBAlCc,EcZnB,EAAA;;AdgCK;EcnCN;Id+CI,gBA/BW;IAiCT,kBAjCe,EcbpB,EAAA;;AdgCK;Ec9BN;Id0CI,gBA3BU;IA6BR,kBA7Bc,EcZnB,EAAA;;Ad2BK;Ec9BN;Id0CI,gBA1BW;IA4BT,kBA5Be,EcbpB,EAAA;;AACD;EACE,oCAAoC,EAErC;;ACtDD;ETiDI,2OAA2B;EAgD3B,YCzEyB;EDyEzB,aE5Fa;EF4Fb,eG5DgD;EH4DhD,gBGtDkD;EHsDlD,YGpB0C;EM3E5C,iBfmGkB,EejGnB;;ACJD;EViDI,2OAA2B;EAgD3B,YCzEyB;EDyEzB,aE5Fa;EF4Fb,eG5DgD;EH4DhD,gBGtDkD;EHsDlD,YGpB0C,EO1E7C;;ACHD;EXiDI,2OAA2B;EAgD3B,YCzEyB;EDyEzB,aE5Fa;EF4Fb,eG5DgD;EH4DhD,gBGtDkD;EHsDlD,YGpB0C;EQ3E5C,aAAa;EACb,uBjBAU,EiBEX;;AACD;EACE,sBAAsB;EACtB,gBAAgB,EAYjB;EAVC;IACE,sBAAsB,EAQvB;IAbH;MAQM,YAAY;MACZ,aAAa;MACb,0BAA0B,EAE3B;;AClBL;EACE,cAAc,EAEf;;AACD;EAEI,iBAAiB,EAElB;;AACD;EACE,4ClBGa,EkBDd","file":"dorsetcollege.css","sourcesContent":["\n// Base Colours\n\n$white: #fff;\n$black: #000;\n// Dorset College\n$dc-blue: #3366FF;\n$dc-red: #F14950;\n$dc-yellow: #E7B929;\n$dc-outline: #D4D1D1;\n$dc-footer: #14235D;\n$dc-grey: #F8F8F8;\n$dc-nav: #6d6e71;  \n$dc-overlay: rgba(212, 209, 209, 0.38);\n\n\n// Breakpoints\n\n$breakpoints: (\n  small: 0,\n  medium: 640px,\n  large: 1024px,\n  xlarge: 1200px,\n  xxlarge: 1440px\n);\n\n// Grids\n\n$grids: 12;\n@include add-grid($grids);\n@include add-gutter(1/3);\n@include sgs-change('debug', true);\n\n// Base Typography\n\n@font-face {\n\n  font-family: Lato;\n  @import url('https://fonts.googleapis.com/css?family=Lato:100,100i,300,300i,400,400i,700,700i,900,900i');\n  \n}\n\n$h-weight: 700; //headers font-weight\n$p-weight: 400; //P default font-weight\n\n$h1-font-sizes: (\n  small: (20pt, 1.1),\n  medium: (30pt, 1.2),\n  xlarge: (60pt, 1.2),\n);\n\n$h2-font-sizes: (\n  small: (20pt, 1.2),\n  xlarge: (30pt, 1.2),\n);\n\n$h3-font-sizes: (\n  small: (16pt, 1.18),\n  xlarge: (25pt, 1.44),\n);\n\n$p-font-sizes: (\n  small: (11pt, 1.63),\n  xlarge: (16pt, 1.68),\n);\n\n@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {\n  @each $fs-breakpoint, $fs-font-size in $fs-map {\n    @if $fs-breakpoint == null {\n      @include make-font-size($fs-font-size);\n    }\n    @else {\n      // If $fs-font-size is a key that exists in\n      // $fs-breakpoints, use the value\n      @if map-has-key($fs-breakpoints, $fs-breakpoint) {\n        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);\n      }\n      @media screen and (min-width: $fs-breakpoint) {\n        @include make-font-size($fs-font-size);\n      }\n    }\n  }\n}\n\n// Utility function for mixin font-size\n@mixin make-font-size($fs-font-size) {\n  // If $fs-font-size is a list, include\n  // both font-size and line-height\n  @if type-of($fs-font-size) == \"list\" {\n    font-size: nth($fs-font-size, 1);\n    @if (length($fs-font-size) > 1) {\n      line-height: nth($fs-font-size, 2);\n    }\n  }\n  @else {\n    font-size: $fs-font-size;\n  }\n}\n\n// SPACING\n\n$content-padding: 6%;","a {\n  text-decoration: none;\n\n}\n","* {\n  margin: 0;\n  padding: 0;\n  \n}\nhtml, body, div, {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  font-size: 100%;\n  vertical-align: baseline;\n  font: inherit;\n\n}\n","h1, h2, h3, a {\n  color: $white;\n  \n}",".icon {\n  img {\n    width: 61px;\n    height: 61px;\n  \n  }\n}","img {\n  max-width: 500px;\n  \n}\n// Image Header\n#zone-header-img {\n  .block-region-headerimage {\n    @include grid-span(12, 1);\n    \n    .header-image{\n      @include grid-span(12, 1);\n      position: absolute;\n      top: 71px;\n      left: 0;\n      height: 309px;\n      z-index: -1;\n    \n    }\n    img{\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n      \n    }\n  }\n}","@import \"api/float\";\n@import \"api/isolation\";\n@import \"api/calc\";\n\n//////////////////////////////\n// Master Grid Span mixin\n//////////////////////////////\n@mixin grid-span($span, $location: 1, $grid: null, $gutter: null, $output-style: null, $gutter-style: null, $options: null) {\n\n  @if $output-style == null {\n    $output-style: sgs-get('output');\n  }\n\n  $Grid: find-grid($grid);\n  $Gutter: find-gutter($gutter);\n  $Style: find-gutter-style($gutter-style);\n\n  $Start-Row: start-row($location);\n  $End-Row: end-row($span, $location, $Grid);\n\n  $Fixed-Gutter: fixed-gutter($Grid, $Gutter, $Style);\n  $Split-Gutter: index($Style, 'split');\n  $Gutter-Property: gutter-property($Grid, $Gutter, $Style);\n\n  $Direction: sgs-get('direction');\n  $From: if($options and type-of($options) == 'map', if(map-get($options, 'from'), map-get($options, 'from'), $Direction), $Direction);\n  $From: if($From == 'ltr' or $From == 'rtl', named-direction($From), $From);\n\n  $Holder: ();\n  @each $k, $v in $options {\n    $Holder: if($k == 'from', $Holder, map-merge($Holder, ($k: $v)));\n  }\n  $options: if(length($Holder) > 0, $Holder, null);\n\n  $Span-Map: (\n    'span': $span,\n    'location': $location,\n    'grid': $Grid,\n    'gutter': $Gutter,\n    'style': $Style,\n    'start row': $Start-Row,\n    'end row': $End-Row,\n    'fixed gutter': $Fixed-Gutter,\n    'split gutter': $Split-Gutter,\n    'gutter property': $Gutter-Property,\n    'options': $options\n  );\n\n  @if sgs-get('debug') != false {\n    -sgs-span-settings: inspect($Span-Map);\n  }\n\n\n  @if function-exists('output-#{$output-style}') {\n    $Left: ();\n    $Right: ();\n\n    @if $Direction == 'both' or $From == 'left' or ($Direction == 'rtl' and $From == 'opposite') {\n      $Left: call('output-#{$output-style}', map-merge($Span-Map, ('direction': left)));\n    }\n\n    @if $Direction == 'both' or $From == 'right' or ($Direction == 'ltr' and $From == 'opposite') {\n      $Right: call('output-#{$output-style}', map-merge($Span-Map, ('direction': right)));\n    }\n\n    $Left-Keys: map-keys($Left);\n    $Right-Keys: map-keys($Right);\n    $Exclude: ();\n\n    @each $key in $Left-Keys {\n      @if index($Right-Keys, $key) {\n        @if map-get($Right, $key) == map-get($Left, $key) {\n          $Exclude: append($Exclude, $key);\n        }\n      }\n    }\n\n    // Always try and print the Left value\n    @include grid-span-build-exclude($Left, $Exclude, false);\n\n    // If Direction is Both or RTL, add the RTL attribute selector\n    @if $Direction == 'both' or $Direction == 'rtl' {\n      [dir=\"rtl\"] & {\n        @include grid-span-build-exclude($Right, $Exclude, true);\n      }\n    }\n    @else {\n      @include grid-span-build-exclude($Right, $Exclude, true);\n    }\n  }\n  @else {\n    @warn \"There doesn't appear to be an output style named `#{$output-style}`. Please ensure that the function `output-#{$output-style}` and that the output style `#{$output-style}` are both available before trying to use them.\";\n  }\n}\n\n@mixin grid-span-build($property, $value) {\n  @if type-of($value) != 'map' {\n    #{$property}: $value;\n  }\n  @else {\n    @each $prefix, $val in $value {\n      #{$property}: $val;\n    }\n  }\n}\n\n@mixin grid-span-build-exclude($properties, $delta, $exclude: false) {\n  @each $property, $value in $properties {\n    @if $exclude {\n      @if not index($delta, $property) {\n        @include grid-span-build($property, $value);\n      }\n    }\n    @else {\n      @include grid-span-build($property, $value);\n    }\n  }\n}","//////////////////////////////\n// Find width, in percentages, of the column span\n//////////////////////////////\n@function column-span($span, $location, $grid: null, $gutter: null, $gutter-style: null) {\n  // Find the grid and gutters\n  $grid: find-grid($grid);\n  $gutter: find-gutter($gutter);\n  $gutter-style: find-gutter-style($gutter-style);\n\n  @if fixed-gutter($grid, $gutter, $gutter-style) {\n    $gutter: 0;\n  }\n\n  // @debug $grid;\n  // @debug $gutter;\n\n  // Combine the grid and gutters\n  $grid-and-gutters: column-sum($grid, $gutter, $gutter-style);\n\n  // @debug $grid-and-gutters;\n\n  // Equal width grid are easy! Deal with them!\n  @if type-of($grid) == 'number' or length($grid) == 1 {\n    $span-and-gutters: $span + $gutter * ($span - 1);\n    @return $span-and-gutters / $grid-and-gutters * 100%;\n  }\n  // Asymmetric lists are harder, so we're going to treat them as their own grid\n  @else if type-of($grid) == 'list' or length($grid) > 1 {\n    $span-and-gutters: 0;\n\n    @if $location == 1 and $span >= 1 {\n      @for $i from 1 through $span {\n        $span-and-gutters: $span-and-gutters + nth($grid, $i) + $gutter;\n      }\n    }\n    @else {\n      $total: $location + $span - 1;\n      @if $total != 0 {\n        @for $i from $location through $total {\n          $span-and-gutters: $span-and-gutters + nth($grid, $i) + $gutter;\n        }\n      }\n    }\n    $span-and-gutters: $span-and-gutters - $gutter;\n\n    @return $span-and-gutters / $grid-and-gutters * 100%;\n  }\n  @else {\n    @warn \"Can't find a working set of grid! That's terrible!\";\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Find the total sum of the grid\n//////////////////////////////\n@function column-sum($grid, $gutter, $gutter-style) {\n  $split: if(index($gutter-style, 'split'), true, false);\n\n  @if type-of($grid) == 'number' or length($grid) == 1 {\n    @if $split {\n      @return nth($grid, 1) + ((column-count(nth($grid, 1))) * nth($gutter, 1));\n    }\n    @else {\n      @return nth($grid, 1) + ((column-count(nth($grid, 1)) - 1) * nth($gutter, 1));\n    }\n\n  }\n  @else if type-of($grid) == 'list' {\n    $sum: 0;\n    @each $column in $grid {\n      $sum: $sum + nth($column, 1);\n    }\n    @if $split {\n      $sum: $sum + (column-count($grid)) * nth($gutter, 1);\n    }\n    @else {\n      $sum: $sum + (column-count($grid) - 1) * nth($gutter, 1);\n    }\n    @return $sum;\n  }\n}\n\n//////////////////////////////\n// Find the number of grid\n//////////////////////////////\n@function column-count($grid) {\n  @if type-of($grid) == 'number' {\n    @return $grid;\n  }\n  @if type-of($grid) == 'list' {\n    @if length($grid) == 1 {\n      @return nth($grid, 1);\n    }\n    @else {\n      @return length($grid);\n    }\n  }\n}","//////////////////////////////\n// Find Opposite Direction\n//////////////////////////////\n@function opposite-direction($dir) {\n  @if $dir == 'left' {\n    @return right;\n  }\n  @else if  $dir == 'right' {\n    @return left;\n  }\n  @else if $dir == 'ltr' {\n    @return rtl;\n  }\n  @else if $dir == 'rtl' {\n    @return ltr;\n  }\n  @else if $dir == 'top' {\n    @return bottom;\n  }\n  @else if $dir == 'bottom' {\n    @return top;\n  }\n  @else {\n    @warn \"#{$dir} is not a direction! Make sure your direction is all lowercase!\";\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Find Direction Name\n//////////////////////////////\n@function named-direction($dir) {\n  @if $dir == 'ltr' {\n    @return left;\n  }\n  @else if $dir == 'rtl' {\n    @return right;\n  }\n  @else {\n    @warn \"#{$dir} is not a valid HTML direction! Make sure you are using a valid HTML direction\";\n    @return false;\n  }\n}","@function output-isolation($Span-Map) {\n  // Set up Left/Right maps\n  $Return: ();\n\n  $Span: map-get($Span-Map, 'span');\n  $Location: map-get($Span-Map, 'location');\n\n  $Grid: map-get($Span-Map, 'grid');\n  $Gutter: map-get($Span-Map, 'gutter');\n  $Style: map-get($Span-Map, 'style');\n\n  $Start-Row: map-get($Span-Map, 'start row');\n  $End-Row: map-get($Span-Map, 'end row');\n\n  $Fixed-Gutter: map-get($Span-Map, 'fixed gutter');\n  $Split-Gutter: map-get($Span-Map, 'split gutter');\n  $Gutter-Property: map-get($Span-Map, 'gutter property');\n\n  $Direction: map-get($Span-Map, 'direction');\n  $Options: map-get($Span-Map, 'options');\n\n  $Width: column-span($Span, $Location, $Grid, $Gutter, $Style);\n  $Margin-Span: column-span(($Location - 1), 1, $Grid, $Gutter, $Style);\n  $Gutter-Span: gutter-span($Gutter, $Grid);\n\n  // Backwards Compatibility for Options\n  @if type-of($Options) != 'map' and $Options != null {\n    $Options: ('clear': unquote(nth($Options, 1)));\n  }\n\n  $Dir: $Direction;\n  $Opp: opposite-direction($Dir);\n\n  $Return: map-merge($Return, ('width': $Width));\n\n  @if ($End-Row) {\n    $Return: map-merge($Return, ('float': $Opp));\n    $Return: map-merge($Return, ('margin-#{$Dir}': 0));\n\n    @if $Split-Gutter and not $Fixed-Gutter {\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\n    }\n    @else {\n      $Return: map-merge($Return, ('margin-#{$Opp}': 0));\n    }\n  }\n  @else {\n    $Return: map-merge($Return, ('float': $Dir));\n    $Return: map-merge($Return, ('margin-#{$Opp}': -100%));\n\n    @if $Start-Row {\n      @if $Split-Gutter and not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Gutter-Span / 2));\n      }\n      @else if not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': 0));\n      }\n    }\n    @else {\n      @if $Split-Gutter and not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Margin-Span + $Gutter-Span + $Gutter-Span / 2));\n      }\n      @else if not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Margin-Span + $Gutter-Span));\n      }\n      @else {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Margin-Span));\n      }\n    }\n  }\n  // If options are set, we merge them in!\n  @if ($Options) {\n    $Return: map-merge($Return, $Options);\n  }\n\n  // If CLear isn't already available, set it!\n  @if not map-has-key($Return, 'clear') {\n    $Return: map-merge($Return, ('clear': none));\n  }\n\n  // Left Fixed Gutters\n  @if $Fixed-Gutter {\n    @if index($Style, 'split') {\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Dir}': $Gutter-Span / 2));\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\n    }\n    @else {\n      @if not $End-Row {\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span));\n      }\n      @else {\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': 0));\n      }\n    }\n  }\n\n  @return $Return;\n}\n\n//////////////////////////////\n// Happy Syntax for Isolation\n//\n// Makes working with Isolation easier, as it moves Clear to a 1st class citizen of the mixin, and automatically builds the verbose grid-span mixin call\n//////////////////////////////\n@mixin isolation-span($Span, $Location, $clear: false, $grid: false, $gutter: false, $gutter-style: false, $from: false) {\n  $Options: ();\n  @if $clear {\n    $Options: map-merge($Options, ('clear': unquote($clear)));\n  }\n  @if $from {\n    $Options: map-merge($Options, ('from': $from));\n  }\n\n  $Options: if(length($Options) > 0, $Options, null);\n  @include grid-span($Span, $Location, $grid, $gutter, 'isolation', $gutter-style, $Options);\n}\n\n//////////////////////////////\n// Happy Syntax of Asymmetric Grids\n//\n// Makes working with asymmetric grids easier!\n//////////////////////////////\n@mixin asymmetric-span($Location, $Span: false, $grid: false, $gutter: false, $gutter-style: false, $from: false, $output-style: false) {\n\n  $Span: if($Span != false, $Span, 1);\n  $output-style: if($output-style != false, $output-style, sgs-get('asymmetric output'));\n\n  $Options: ();\n  @if $from {\n    $Options: map-merge($Options, ('from': $from));\n  }\n  $Options: if(length($Options) > 0, $Options, null);\n\n  @include grid-span($Span, $Location, $grid, $gutter, $output-style, $gutter-style, $Options);\n}","#zone-main,\n#zone-header-img,\n#zone-header,\n#zone-footer,\n#zone-post-footer {\n  padding-left: $content-padding;\n  padding-right: $content-padding;\n  \n}",".block-links {\n  margin-top: 11px;\n\n  .block-content .link {\n    a {\n      float: left;\n      padding: 10px;\n      border: solid 2px $dc-outline;\n      margin: 9px 0 9px 0;\n      \n    }\n    &:first-child a {\n      border-radius: 25px 0 0 25px;\n      \n    }\n    &:last-child a {\n      border-radius: 0 25px 25px 0;\n      \n    }\n    &:hover {\n      background-color: $dc-outline;\n      \n    }\n  }\n}","#block-dorsetcollege-main-menu {\n  display: none;\n\n  @include breakpoint($breakpoint('large')) {\n    display: block;\n    \n  }\n}\n\n#main-menu-trigger {\n  width: 28px;\n  height: 19px;\n  position: absolute;\n  top: 26px;\n  right: 6%;\n\n  span {\n    display: block;\n    position: absolute;\n    height: 3px;\n    width: 100%;\n    background-color: $dc-nav;\n    left: 0;\n    top: 0;\n\n    &:nth-child(2) {\n      top: 8px;\n      \n    }\n    \n    &:nth-child(3) {\n      top: 16px;\n\n    }\n  }\n}","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","h1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-family: \"Lato\";\n  \n}\n\na,\np,\ndiv,\nli {\n  font-family: \"Lato\";\n\n}\n\np,\na {\n  font-weight: $p-weight;\n\n}\n\nh1,\nh2,\nh3 {\n  font-weight: $h-weight;\n\n}\n\nh1 {\n  @include font-size($h1-font-sizes);\n  font-weight: 700;\n  \n}\n\nh2 {\n  @include font-size($h2-font-sizes);\n\n}\n\nh3 {\n  @include font-size($h3-font-sizes);\n\n}\n\np {\n  @include font-size($p-font-sizes);\n\n}\n* {\n  -webkit-font-smoothing: antialiased;\n  \n}","#section-content {\n  @include grid-span(12, 1);\n  padding-left: $content-padding;\n  \n}","#section-footer {\n  @include grid-span(12, 1);\n  \n}","#section-header {\n  @include grid-span(12, 1);\n  height: 71px;\n  background-color: $white;\n\n}\n#logo {\n  display: inline-block;\n  margin-top: 7px;\n  \n  .site-logo {\n    display: inline-block;\n\n    img {\n      width: 57px;\n      height: 57px;\n      display: block !important;\n\n    }\n  }\n}",".path-frontpage .block-region-headerimage {\n  height: 309px;\n  \n}\n#zone-header-img {\n  h1 {\n    margin-top: 35px;\n    \n  }\n  .header-image {\n    background-color: $dc-overlay;\n    \n  }\n}"]}